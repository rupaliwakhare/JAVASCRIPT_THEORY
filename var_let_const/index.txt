In JavaScript, const is a keyword used to declare variables that cannot be reassigned after their initial assignment. It was introduced in ES6 (2015) and is ideal for values that should remain constant throughout the program.

🔐 Key Characteristics of const
Block-scoped: Like let, it’s only accessible within the {} block where it’s defined.

Must be initialized: You must assign a value when declaring it.

No reassignment: Once assigned, you can’t reassign the variable to a new value.

Mutable objects: If the value is an object or array, its contents can still be changed.

🧪 Example
javascript
const PI = 3.14159;
PI = 3.14; // ❌ Error: Assignment to constant variable

const user = { name: "Aarav" };
user.name = "Riya"; // ✅ Allowed: modifying object property









📌 When to Use const
For values that should never change (e.g., configuration settings, fixed numbers).

To make your code more predictable and easier to debug.

As a default choice—use let only when you know the value will change.

Want to see how const behaves differently from let in loops or how it works with arrays and objects?

var vs let vs const in js
Here’s a clear breakdown of the differences between var, let, and const in JavaScript—three ways to declare variables, each with its own quirks and best-use scenarios:











📦 Scope
Keyword	Scope Type	Accessible Where?
var	Function scope	Inside the function where it's declared
let	Block scope	Inside the {} block where it's declared
const	Block scope	Same as let, but cannot be reassigned









🔄 Reassignment & Redeclaration


Keyword	                            Reassignable	                  Redeclarable in Same Scope
var	                                  ✅ Yes                             	✅ Yes
let                                	  ✅ Yes                                	❌ No
const	                              ❌ No	                                ❌ No









🪄 Hoisting Behavior
var is hoisted and initialized as undefined.

let and const are hoisted but stay in the Temporal Dead Zone until declared—accessing them before declaration throws a ReferenceError.

🧪 Example
javascript
function testScope() {
  if (true) {
    var x = 10;
    let y = 20;
    const z = 30;
  }
  console.log(x); // ✅ 10
  console.log(y); // ❌ ReferenceError
  console.log(z); // ❌ ReferenceError
}
✅ Best Practices
Use const by default—it's safer and prevents accidental changes.

Use let when you know the value will change (e.g., loop counters).

Avoid var in modern code unless you're maintaining legacy projects.