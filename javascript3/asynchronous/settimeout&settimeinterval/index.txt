In JavaScript, setTimeout, setInterval, and their corresponding clear methods are used to schedule code execution over time‚Äîperfect for animations, timers, or delayed actions. Here's how they work:

‚è≥ setTimeout()
Runs a function once after a specified delay (in milliseconds).

javascript
const timeoutId = setTimeout(() => {
  console.log("Runs after 2 seconds");
}, 2000);
Use case: Delayed execution (e.g., show a message after a pause).

Cancel it with clearTimeout(timeoutId) before it runs.

üîÅ setInterval()
Runs a function repeatedly at fixed intervals.

javascript
const intervalId = setInterval(() => {
  console.log("Runs every 1 second");
}, 1000);
Use case: Repeating tasks (e.g., clocks, counters).

Stop it with clearInterval(intervalId).

‚ùå Clearing Timers
Function	Cancels...	Example
clearTimeout()	A setTimeout()	clearTimeout(timeoutId)
clearInterval()	A setInterval()	clearInterval(intervalId)
You must store the return value of setTimeout or setInterval to cancel it later2.

üß† Bonus Tip: Recursive setTimeout for Flexible Timing
javascript
function repeat() {
  console.log("Runs every 2 seconds (flexibly)");
  setTimeout(repeat, 2000);
}
repeat();
This gives you more control than setInterval, especially if the task duration varies.

These timing functions are asynchronous, meaning they don‚Äôt block other code from running.